var currentScene = 1;
var ArrayRect = [];
var ArrayEllipse = [];
var PlayerTurn = 3;

//Tanya's Bitmoji
var drewHead = function(bitMX,bitMY,bitH)
{
noStroke();

fill(189, 82, 250);
quad(bitMX+(bitH/200*44), bitMY+(bitH/200*107), bitMX+(bitH/200*40), bitMY-(bitH/200*21), bitMX-(bitH/200*19), bitMY-(bitH/200*50), bitMX-(bitH/200*44), bitMY+(bitH/200*107)); //purple hair

fill(217, 187, 146);
quad(bitMX+(bitH/200*15), bitMY+(bitH/200*70), bitMX+(bitH/200*15), bitMY+(bitH/200*50), bitMX-(bitH/200*14), bitMY+(bitH/200*50), bitMX-(bitH/200*14), bitMY+(bitH/200*70)); //neck

fill(255, 219, 172); //skin color
ellipse(bitMX, bitMY, (bitH/200*80), (bitH/200*107)); //face

fill(1, 5, 43);
quad(bitMX-(bitH/200*64), bitMY+(bitH/200*128), bitMX+(bitH/200*3), bitMY+(bitH/200*129), bitMX+(bitH/200*4), bitMY+(bitH/200*70), bitMX-(bitH/200*44), bitMY+(bitH/200*71));//left of shirt
quad(bitMX+(bitH/200*2), bitMY+(bitH/200*129), bitMX+(bitH/200*70), bitMY+(bitH/200*129), bitMX+(bitH/200*41), bitMY+(bitH/200*70), bitMX-(bitH/200*4), bitMY+(bitH/200*70));//right of shirt

fill(245, 169, 189);
ellipse(bitMX-(bitH/200*24), bitMY+(bitH/200*29), bitH/200*23, bitH/200*15);//left cheek
ellipse(bitMX+(bitH/200*26), bitMY+(bitH/200*29), bitH/200*23, bitH/200*15);//right cheek

fill(51, 35, 16); //hair color
quad(bitMX-(bitH/200*55), bitMY+(bitH/200*108), bitMX-(bitH/200*42), bitMY-(bitH/200*21), bitMX-(bitH/200*19), bitMY-(bitH/200*50), bitMX-(bitH/200*34), bitMY+(bitH/200*107)); //left hair
quad(bitMX+(bitH/200*56), bitMY+(bitH/200*108), bitMX+(bitH/200*42), bitMY-(bitH/200*18), bitMX+(bitH/200*19), bitMY-(bitH/200*51), bitMX+(bitH/200*36), bitMY+(bitH/200*107)); //right hair
ellipse(bitMX-(bitH/200*22), bitMY-(bitH/200*23), bitH/200*32, bitH/200*53); //left top hair
ellipse(bitMX+(bitH/200*20), bitMY-(bitH/200*23), bitH/200*32, bitH/200*53);//right top hair
ellipse(bitMX, bitMY-(bitH/200*27), bitH/200*77, bitH/200*42);//top hair

fill (82, 52, 3); //eyes color
ellipse(bitMX-(bitH/200*10), bitMY+(bitH/200*12), bitH/200*9, bitH/200*5); //left eye
ellipse(bitMX+(bitH/200*14), bitMY+(bitH/200*12), bitH/200*9, bitH/200*5); //right eye
bezier(bitMX+(bitH/200*2), bitMY+(bitH/200*10), bitMX+(bitH/200*18), bitMY+(bitH/200*42), bitMX-(bitH/200*9), bitMY+(bitH/200*31), bitMX+(bitH/200*5), bitMY+(bitH/200*29)); //nose

fill(128, 0, 0);
bezier(bitMX-(bitH/200*44), bitMY-(bitH/200*15), bitMX+(bitH/200*87), bitMY-(bitH/200*80), bitMX+(bitH/200*69), bitMY-(bitH/200*14), bitMX+(bitH/200*39), bitMY-(bitH/200*15)); //hat
fill(255, 0, 0);
arc(bitMX, bitMY-(bitH/200*16), bitH/200*85, bitH/200*-98, 1, 180); //hat
fill(0, 0, 0);
rect(bitMX-(bitH/200*27), bitMY-(bitH/200*32), bitH/200*36, bitH/200*8, bitH/200*30); //hole of hat

fill(255, 255, 255); //white for teeth
stroke(0, 0, 0);
arc(bitMX+(bitH/200*2), bitMY+(bitH/200*37), bitH/200*23, bitH/200*13, 1, 180); //mouth
line(bitMX-(bitH/200*11),bitMY+(bitH/200*37), bitMX+(bitH/200*14), bitMY+(bitH/200*37)); //top of mouth

fill(255, 255, 255);
textSize(bitH/200*39);
text("T.L.", bitMX-(bitH/200*25), bitMY+(bitH/200*80));

};

//Sean's Bitmoji
var drawBody= function(bodyX,bodyY) 
{
    noStroke();
    fill(54, 48, 48);
    rect(bodyX+170,bodyY+150, 60, 91);
    rect(bodyX+180,bodyY+140,40,20); //body + neck
    fill(255,255,255);

    stroke(255,255, 255);
    fill(54, 48, 48);
    arc(bodyX+186,bodyY+196,33,25,-96, 140);  //name
    arc(bodyX+186,bodyY+173,33,25,67, 291);
    rect(bodyX+204,bodyY+157,24,25);
    line(bodyX+204,bodyY+157,bodyX+204,bodyY+209);

};

var drawHead= function(bodyX,bodyY) 
{
    stroke(0,0,0);
    fill(240, 226, 182);
    arc(bodyX+200,bodyY+100,72,131,37,145); //hair ponytail
    fill(240, 221, 215);
    ellipse(bodyX+200,bodyY+100,68,87);//head
    fill(255,255,255);

    line(bodyX+180,bodyY+78,bodyX+199,bodyY+82); //eyebrows
    line(bodyX+221,bodyY+78,bodyX+202,bodyY+82);

    fill(0,0,0);
    arc(bodyX+161,bodyY+99,22,50,0, 361); //headphones
    arc(bodyX+238,bodyY+99,22,50,0, 361);
    rect(bodyX+162,bodyY+53,71,8); 
    rect(bodyX+162,bodyY+60,-1,18);
    rect(bodyX+232,bodyY+58,-1,18);

    fill(240, 226, 182);
    quad(bodyX+240,bodyY+133,bodyX+230,bodyY+59,bodyX+186,bodyY+55,bodyX+220,bodyY+78); //hair
    fill(240, 226, 182);
    quad(bodyX+160,bodyY+136,bodyX+164,bodyY+61,bodyX+218,bodyY+55,bodyX+181,bodyY+79);

    fill(240, 221, 215);
    stroke(0, 0, 0);
    rect(bodyX+205,bodyY+93,16,-12);
    rect(bodyX+180,bodyY+93,16,-12);//glasses
    line(bodyX+196,bodyY+89,bodyX+205,bodyY+89);

    fill(29, 43, 163);
    ellipse(bodyX+213,bodyY+88,6,6);
    ellipse(bodyX+188,bodyY+88,6,6); //eyes

    stroke(0,0,0);
    fill(240, 221, 215);  //nose
    ellipse(bodyX+200,bodyY+102,3,11);
    noStroke();
    fill(0, 0, 0);
    arc(bodyX+199,bodyY+124,30,13,0,361);

    drawBody(bodyX,bodyY); //function call within a function
};

var Button = function(config) 
{
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 300;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() 
{
    fill(50, 7, 143);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(255, 255, 255);
    textSize(25);
    textAlign(LEFT, TOP);
    text(this.label, this.x+70, this.y+this.height/5);
};

Button.prototype.isMouseInside = function() 
{
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() 
{
    if (this.isMouseInside()) 
    {
        this.onClick();
    }
};

var btn1 = new Button(
    {
        x: 50,
        y: 260,
        label: "Start the Game!",
        onClick: function() 
        {
            currentScene = 2;
        }
    }
);

var DrawEllipse = function(x,y) 
{
    ellipse(50+(50*x),105+(50*y),50,50);   
};

var rectangle = function(x,y) 
{
    //fill(255, 0, 0);
    //text(y,25+(50*x), 80+(50*y));
    fill(255, 255, 255);
    stroke(0, 0, 0);
    rect(25+(50*x),80+(50*y),50,50);
};

var ArrayDeclaration = function() 
{
    for (var x = 0; x < 7; x++) 
    {
        for (var y = 0; y < 6; y++) 
        {
            ArrayRect.push([]);
            ArrayRect[x][y] = rectangle(x,y);
        }
    }
    for (var x = 0; x < 7; x++) 
    {
        for (var y = 0; y < 6; y++) 
        {
            ArrayEllipse.push([1]);
            ArrayEllipse[x][y] = 1;

            //println(ArrayEllipse[x][y]);
            // 1 will be no Slot
            // 2 will be Red Slot
            // 3 will be Blue Slot
            // 4 will be last slot
        }
    }
};

var scene1 = function()
{
    background(219, 204, 255);
    drewHead(125,160,151);
    drawHead(70,40);
    btn1.draw();
    fill(0, 41, 153);
    textSize(30);
    text("T&S Connect Four!!",80,30,400,400);
    textSize(18);
    text("Tanya Li", 90,70,400,400);
    text("Sean Phelan", 220,70,400,400);
    textSize(13);
    text("Try to build a row of four checkers while keeping your opponent from doing the same. Sounds easy, but it's not! The vertical strategy creates a unique challenge: you must think in a whole new way to block your opponent's moves!",35,323,350,400);
};

var scene2 = function()
{
    background(255, 255, 255);
    ArrayDeclaration();
};

var checkWin = function (Array, x, y, colour) 
{
    var q = x;
    var w = y;
    var team;
    
    if(colour === 2)
    {
        team = "Red";
    }
    if(colour === 3)
    {
        team = "Blue";
    }
    //Rows
 
    var a = x + 1;
    var b = x + 2;
    var c = x + 3;
 
    var e = y + 1;
    var f = y + 2;
    var g = y + 3;
 
    //println(Array[x][y]);
    
    if(Array[x][y] === colour && Array[a][y] === colour && Array[b][y] === colour && Array[c][y] === colour)
    {
        println(team + " " + "Wins!");
    }
    if(Array[x-1][y] === colour && Array[a-1][y] === colour && Array[b-1][y] === colour && Array[b-3][y] === colour)
    {
        println(team + " " + "Wins!");
    }
    if(Array[x-2][y] === colour && Array[a-2][y] === colour && Array[b-2][y] === colour && Array[c-2][y] === 2)
    {
        println(team + " " + "Wins!");
    }
    if(Array[x-3][y] === colour && Array[a-3][y] === colour && Array[b-3][y] === colour && Array[c-3][y] === colour) 
    {
        println(team + " " + "Wins!");
    }
    
    //Columns
    if(Array[x][y-3] === colour && Array[x][e-3] === colour && Array[x][f-3] === colour && Array[c][g-3] === colour) 
    {
        println(team + " " + "Wins!");
    }

    //Zig-Zag
    else 
    {
        return;
    }
};

draw = function() 
{
    if(currentScene === 1)
    {
        scene1();
    }
    else if(currentScene === 2)
    {
        scene2();
    }
};

mouseClicked = function()
{
    btn1.handleMouseClick();
    for (var x = 0; x < 7; x++) 
    {
        for (var y = 0; y < 6; y++) 
        {
            if(mouseX > 25+(50*x) && mouseX < 25 + (50*x) + 50 && mouseY > 80 + (50*y) && mouseY < 80 + (50*y) + 50) 
            {
                if(ArrayEllipse[x][y+1] !== 1)
                {
                    if (PlayerTurn === 2 && ArrayEllipse[x][y] !== 2 && ArrayEllipse[x][y] !== 3)
                    {
                        fill(255, 0, 0);
                        DrawEllipse(x,y);
                        ArrayEllipse[x][y] = 2;
                        PlayerTurn = 3;
                        checkWin(ArrayEllipse,x,y,2);
                    }
                    else 
                    {
                        if (PlayerTurn === 3 && ArrayEllipse[x][y] !== 2 && ArrayEllipse[x][y] !== 3 && ArrayEllipse[x][y] !== 0)
                        {
                            fill(26, 0, 255);
                            DrawEllipse(x,y);
                            ArrayEllipse[x][y] = 3;
                            PlayerTurn = 2;
                            checkWin(ArrayEllipse,x,y,3);
                        }
                    }
                }
            }
        }
    }
};
